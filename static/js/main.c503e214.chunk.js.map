{"version":3,"sources":["UseResizeObserver.js","GeoMap.js","App.js","index.js"],"names":["useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","GeoChart","data","property","svgRef","useRef","wrapperRef","india","features","filter","feature","properties","admin","console","log","selectedCountry","setSelectedCountry","svg","select","minProp","min","maxProp","max","colorScale","scaleLinear","domain","range","getBoundingClientRect","width","height","projection","geoMercator","fitSize","precision","pathGenerator","geoPath","selectAll","join","on","attr","transition","duration","text","name","toLocaleString","style","marginBottom","App","setProperty","Fragment","className","value","onChange","event","target","ReactDOM","render","document","getElementById"],"mappings":"gkojBAyBeA,EAjBW,SAAAC,GAAQ,IAAD,EACKC,mBAAS,MADd,mBACxBC,EADwB,KACZC,EADY,KAc/B,OAZAC,qBAAU,WACR,IAAMC,EAAgBL,EAAIM,QACpBC,EAAiB,IAAIC,KAAe,SAAAC,GACxCA,EAAQC,SAAQ,SAAAC,GACdR,EAAcQ,EAAMC,mBAIxB,OADAL,EAAeM,QAAQR,GAChB,WACLE,EAAeO,UAAUT,MAE1B,CAACL,IACGE,GCmDMa,MAjEf,YAAuC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SAClBC,EAASC,mBACTC,EAAaD,mBACbjB,EAAaH,EAAkBqB,GAC/BC,EAASL,EAAKM,SAASC,QAAO,SAAAC,GAAW,GAAiC,UAA7BA,EAAQC,WAAWC,MAAoB,OAAOF,KACjGG,QAAQC,IAAIP,EAAM,IALkB,MAMUpB,mBAASoB,EAAM,IANzB,mBAM7BQ,EAN6B,KAMZC,EANY,KA0DpC,OAnDAH,QAAQC,IAAIC,GAEZzB,qBAAU,WACR,IAAM2B,EAAMC,YAAOd,EAAOZ,SAEpB2B,EAAUC,YAAIlB,EAAKM,UAAU,SAAAE,GAAO,OAAIA,EAAQC,WAAWR,MAE3DkB,EAAUC,YAAIpB,EAAKM,UAAU,SAAAE,GAAO,OAAIA,EAAQC,WAAWR,MAC3DoB,EAAaC,cAChBC,OAAO,CAACN,EAASE,IACjBK,MAAM,CAAC,UAAW,YARP,EAWZtC,GAAckB,EAAWd,QAAQmC,wBAD3BC,EAVM,EAUNA,MAAOC,EAVD,EAUCA,OAITC,EAAaC,cAChBC,QAAQ,CAACJ,EAAOC,GAASd,GAAmBb,GAC5C+B,UAAU,KAEPC,EAAgBC,cAAUL,WAAWA,GAE3Cb,EACGmB,UAAU,YACVlC,KAAKA,EAAKM,UACV6B,KAAK,QACLC,GAAG,SAAS,SAAA5B,GACXM,EAAmBD,IAAoBL,EAAU,KAAOA,MAEzD6B,KAAK,QAAS,WACdC,aACAC,SAAS,KACTF,KAAK,QAAQ,SAAA7B,GAAO,OAAIa,EAAWb,EAAQC,WAAWR,OACtDoC,KAAK,KAAK,SAAA7B,GAAO,OAAIwB,EAAcxB,MAEtCO,EACGmB,UAAU,UACVlC,KAAK,CAACa,IACNsB,KAAK,QACLE,KAAK,QAAS,SACdG,MACC,SAAAhC,GAAO,OACLA,GACAA,EAAQC,WAAWgC,KACnB,KACAjC,EAAQC,WAAWR,GAAUyC,oBAEhCL,KAAK,IAAK,IACVA,KAAK,IAAK,MACZ,CAACrC,EAAMd,EAAYe,EAAUY,IAG9B,yBAAK7B,IAAKoB,EAAYuC,MAAO,CAAEC,aAAc,SAC3C,yBAAK5D,IAAKkB,M,cC1CD2C,MArBf,WAAgB,IAAD,EACmB5D,mBAAS,cAD5B,mBACNgB,EADM,KACI6C,EADJ,KAEb,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,OACb,wBAAIA,UAAU,OAAd,oCACA,kBAAC,EAAD,CAAWhD,KAAMA,EAAMC,SAAUA,IACjC,4DACA,4BACEgD,MAAOhD,EACPiD,SAAU,SAAAC,GAAK,OAAIL,EAAYK,EAAMC,OAAOH,SAE5C,4BAAQA,MAAM,cAAd,OACA,4BAAQA,MAAM,WAAd,cACA,4BAAQA,MAAM,YAAd,mBChBVI,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.c503e214.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport ResizeObserver from \"resize-observer-polyfill\";\r\n\r\n/**\r\n * Hook, that returns the current dimensions of an HTML element.\r\n * Doesn't play well with SVG.\r\n */\r\n\r\nconst useResizeObserver = ref => {\r\n  const [dimensions, setDimensions] = useState(null);\r\n  useEffect(() => {\r\n    const observeTarget = ref.current;\r\n    const resizeObserver = new ResizeObserver(entries => {\r\n      entries.forEach(entry => {\r\n        setDimensions(entry.contentRect);\r\n      });\r\n    });\r\n    resizeObserver.observe(observeTarget);\r\n    return () => {\r\n      resizeObserver.unobserve(observeTarget);\r\n    };\r\n  }, [ref]);\r\n  return dimensions;\r\n};\r\n\r\nexport default useResizeObserver;","import React, { useRef, useEffect, useState } from \"react\";\r\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from \"d3\";\r\n// import  transition  from 'd3-transition';\r\nimport 'd3-transition';\r\n\r\nimport useResizeObserver from \"./UseResizeObserver\";\r\n\r\n\r\nfunction GeoChart({ data, property }) {\r\n  const svgRef = useRef();\r\n  const wrapperRef = useRef();\r\n  const dimensions = useResizeObserver(wrapperRef);\r\n  const india = (data.features.filter(feature=> {if( feature.properties.admin === \"India\" ){return feature } }  ) )\r\n  console.log(india[0]);\r\n  const [selectedCountry, setSelectedCountry] = useState(india[0]);\r\n  console.log(selectedCountry);\r\n\r\n  useEffect(() => {\r\n    const svg = select(svgRef.current);\r\n\r\n    const minProp = min(data.features, feature => feature.properties[property]);\r\n\r\n    const maxProp = max(data.features, feature => feature.properties[property]);\r\n    const colorScale = scaleLinear()\r\n      .domain([minProp, maxProp])\r\n      .range([\"#e4e4e4\", \"#de7171\"]);\r\n\r\n    const { width, height } =\r\n      dimensions || wrapperRef.current.getBoundingClientRect();\r\n      \r\n\r\n    const projection = geoMercator()\r\n      .fitSize([width, height], selectedCountry || data )\r\n      .precision(100);\r\n\r\n    const pathGenerator = geoPath().projection(projection);\r\n\r\n    svg\r\n      .selectAll(\".country\")\r\n      .data(data.features)\r\n      .join(\"path\")\r\n      .on(\"click\", feature => {\r\n        setSelectedCountry(selectedCountry === feature ? null : feature);\r\n      })\r\n      .attr(\"class\", \"country\")\r\n      .transition()\r\n      .duration(1000)\r\n      .attr(\"fill\", feature => colorScale(feature.properties[property]))\r\n      .attr(\"d\", feature => pathGenerator(feature));\r\n\r\n    svg\r\n      .selectAll(\".label\")\r\n      .data([selectedCountry])\r\n      .join(\"text\")\r\n      .attr(\"class\", \"label\")\r\n      .text(\r\n        feature =>\r\n          feature &&\r\n          feature.properties.name +\r\n          \": \" +\r\n          feature.properties[property].toLocaleString()\r\n      )\r\n      .attr(\"x\", 10)\r\n      .attr(\"y\", 25);\r\n  }, [data, dimensions, property, selectedCountry]);\r\n\r\n  return (\r\n    <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\r\n      <svg ref={svgRef}></svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GeoChart;","import React, { useState } from \"react\";\r\nimport GeoChart from \"./GeoMap\";\r\nimport data from \"./custom.geo.json\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [property, setProperty] = useState(\"gdp_md_est\");\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"mid\">\r\n        <h2 className=\"geo\">Welcome to World Map with d3-geo</h2>\r\n        <GeoChart  data={data} property={property} />\r\n        <h2>Select property to highlight</h2>\r\n        <select\r\n          value={property}\r\n          onChange={event => setProperty(event.target.value)}\r\n        >\r\n          <option value=\"gdp_md_est\">GDP</option>\r\n          <option value=\"pop_est\">Population</option>\r\n          <option value=\"name_len\">Name length</option>\r\n        </select>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from './App'\r\nReactDOM.render(<App /> ,document.getElementById('todo'));\r\n\r\n"],"sourceRoot":""}